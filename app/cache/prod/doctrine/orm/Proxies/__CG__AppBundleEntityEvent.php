<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Event extends \AppBundle\Entity\Event implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'paid_event', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'finish_date', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'address', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'ticket_url', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'information', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'updated_at', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'website', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'thumbnail', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'logo', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'price', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'groups', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'mediaEvent'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'paid_event', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'finish_date', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'address', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'ticket_url', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'information', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'date', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'updated_at', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'website', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'thumbnail', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'logo', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'price', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'groups', '' . "\0" . 'AppBundle\\Entity\\Event' . "\0" . 'mediaEvent'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Event $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrice($price)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrice', [$price]);

        return parent::setPrice($price);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrice()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrice', []);

        return parent::getPrice();
    }

    /**
     * {@inheritDoc}
     */
    public function setPaidevent($paid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPaidevent', [$paid]);

        return parent::setPaidevent($paid);
    }

    /**
     * {@inheritDoc}
     */
    public function getPaidevent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPaidevent', []);

        return parent::getPaidevent();
    }

    /**
     * {@inheritDoc}
     */
    public function setAddress($address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAddress', [$address]);

        return parent::setAddress($address);
    }

    /**
     * {@inheritDoc}
     */
    public function getAddress()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAddress', []);

        return parent::getAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setTicketURL($ticketURL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTicketURL', [$ticketURL]);

        return parent::setTicketURL($ticketURL);
    }

    /**
     * {@inheritDoc}
     */
    public function getTicketURL()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTicketURL', []);

        return parent::getTicketURL();
    }

    /**
     * {@inheritDoc}
     */
    public function setInformation($information)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setInformation', [$information]);

        return parent::setInformation($information);
    }

    /**
     * {@inheritDoc}
     */
    public function getInformation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getInformation', []);

        return parent::getInformation();
    }

    /**
     * {@inheritDoc}
     */
    public function getWebsite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebsite', []);

        return parent::getWebsite();
    }

    /**
     * {@inheritDoc}
     */
    public function setWebsite($website)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWebsite', [$website]);

        return parent::setWebsite($website);
    }

    /**
     * {@inheritDoc}
     */
    public function setGroups(\AppBundle\Entity\Groups $groups = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroups', [$groups]);

        return parent::setGroups($groups);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroups()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroups', []);

        return parent::getGroups();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogo($logo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogo', [$logo]);

        return parent::setLogo($logo);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogo', []);

        return parent::getLogo();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updated_at)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updated_at]);

        return parent::setUpdatedAt($updated_at);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addMediaEvent(\AppBundle\Entity\MediaEvent $mediaEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addMediaEvent', [$mediaEvent]);

        return parent::addMediaEvent($mediaEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeMediaEvent(\AppBundle\Entity\MediaEvent $mediaEvent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeMediaEvent', [$mediaEvent]);

        return parent::removeMediaEvent($mediaEvent);
    }

    /**
     * {@inheritDoc}
     */
    public function getMediaEvent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMediaEvent', []);

        return parent::getMediaEvent();
    }

}
